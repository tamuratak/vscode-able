{
  "name": "able",
  "displayName": "Able",
  "version": "2.0.0",
  "publisher": "tamuratak",
  "license": "MIT",
  "description": "An extension able to do things",
  "homepage": "https://github.com/tamuratak/vscode-able",
  "main": "./out/src/main.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/tamuratak/vscode-able.git"
  },
  "engines": {
    "vscode": "^1.95.0"
  },
  "files": [
    "pyodide/pyodide",
    "node_modules",
    "out",
    "LICENSE"
  ],
  "capabilities": {
    "virtualWorkspaces": true,
    "untrustedWorkspaces": {
      "supported": true
    }
  },
  "contributes": {
    "authentication": [
      {
        "id": "openai_api",
        "label": "OpenAI API (with Able)"
      }
    ],
    "chatParticipants": [
      {
        "id": "able.chatParticipant",
        "fullName": "Able Chat",
        "name": "able",
        "description": "Able to write well",
        "isSticky": true,
        "commands": [
          {
            "name": "fluent",
            "description": "Make fluent"
          },
          {
            "name": "fluent_ja",
            "description": "Make fluent in Japanese"
          },
          {
            "name": "to_en",
            "description": "Translate to English"
          },
          {
            "name": "to_ja",
            "description": "Translate to Japanese"
          },
          {
            "name": "use_copilot",
            "description": "Use Copilot"
          },
          {
            "name": "use_openai_api",
            "description": "Use OpenAI API"
          }
        ]
      }
    ],
    "languageModelTools": [
      {
        "name": "able-python",
        "tags": [
          "Python Execution"
      ],
      "displayName": "Run Python",
        "modelDescription": "This tool executes Python code using Pyodide, a WebAssembly-based Python runtime, and returns the result of the final expression evaluated by the code. It is particularly useful in scenarios where a large language model (LLM) needs to dynamically evaluate code snippets for debugging, testing, or real-time data processing. By leveraging this tool, an LLM can safely run Python code in a sandboxed environment, allowing for rapid experimentation and iterative development. This capability is especially beneficial when an LLM must validate code behavior or compute results on the fly as part of its decision-making process.",
        "inputSchema": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "The Python code to run"
              },
              "reason": {
                  "type": "string",
                  "description": "The reason for running the code"
              }
          },
          "required": [
              "code"
          ]
        }
      }
    ],
    "commands": [
      {
        "command": "able.activateCopilotChatModels",
        "title": "Able: Activate Copilot Chat Models"
      },
      {
        "command": "able.closeTerminalAndOpenSideBar",
        "title": "Able: Close Terminal and Open Side Bar"
      },
      {
        "command": "able.disableInlineSuggest",
        "title": "Able: Copilot, let's savor a little silence for a while."
      },
      {
        "command": "able.focusActiveDocument",
        "title": "Able: Focus Active Document"
      },
      {
        "command": "able.focusTerminal",
        "title": "Able: Focus Terminal"
      },
      {
        "command": "able.killLinesToEnd",
        "title": "Able: Kill Lines To End"
      },
      {
        "command": "able.loginOpenAI",
        "title": "Able: Login to OpenAI"
      },
      {
        "command": "able.openTerminalAndCloseSideBar",
        "title": "Able: Open Terminal and Close Side Bar"
      },
      {
        "command": "able.recenter",
        "title": "Able: Recenter"
      },
      {
        "command": "able.terminalNew",
        "title": "Able: Create New Terminal"
      }
    ],
    "keybindings": [
      {
        "command": "able.closeTerminalAndOpenSideBar",
        "key": "Shift+Ctrl+t",
        "when": "!sideBarVisible"
      },
      {
        "command": "able.disableInlineSuggest",
        "key": "shift+escape",
        "when": "inlineSuggestionVisible"
      },
      {
        "command": "able.openTerminalAndCloseSideBar",
        "key": "Shift+Ctrl+t",
        "when": "sideBarVisible"
      },
      {
        "key": "ctrl+t",
        "command": "able.terminalNew",
        "when": "terminalProcessSupported && !terminalIsOpen"
      },
      {
        "key": "ctrl+t",
        "command": "able.focusTerminal",
        "when": "!terminalFocus && !terminalEditorFocus && terminalIsOpen"
      },
      {
        "key": "ctrl+t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminalFocus && !terminalEditorFocus"
      },
      {
        "key": "ctrl+t",
        "command": "able.focusActiveDocument",
        "when": "terminalEditorFocus"
      },
      {
        "key": "ctrl+l ctrl+l",
        "command": "able.recenter"
      },
      {
        "key": "ctrl+k",
        "command": "able.killLinesToEnd",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+k",
        "command": "-deleteAllRight",
        "when": "editorTextFocus && !editorReadonly"
      }
    ]
  },
  "activationEvents": [
    "onFileSystem:file"
  ],
  "imports": {
    "#pyodide": {
      "default": "./pyodide/pyodide/pyodide.js"
    }
  },
  "dependencies": {
    "@microsoft/tiktokenizer": "^1.0.9",
    "@vscode/prompt-tsx": "^0.3.0-alpha.13",
    "openai": "^4.76.0",
    "workerpool": "^9.2.0"
  },
  "devDependencies": {
    "@eslint/js": "9.15.0",
    "@types/eslint__js": "8.42.3",
    "@types/node": "~20.14",
    "@types/vscode": "1.95.0",
    "@vscode/vsce": "3.2.1",
    "eslint": "9.15.0",
    "rimraf": "3.0.2",
    "typescript": "5.7.2",
    "typescript-eslint": "8.16.0"
  },
  "scripts": {
    "build": "npm run compile",
    "compile": "tsc -p ./",
    "clean": "rimraf out/ .eslintcache",
    "download_pyodide": "node ./dev/download_pyodide.mjs",
    "lint": "eslint --cache .",
    "lint:fix": "eslint --fix --cache .",
    "release": "npm run clean && npm run lint && npm run compile && vsce package",
    "watch": "tsc -w -p ./"
  }
}
