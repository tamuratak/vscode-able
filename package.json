{
  "name": "able",
  "displayName": "Able",
  "version": "3.6.1",
  "publisher": "tamuratak",
  "license": "MIT",
  "description": "An extension able to do things",
  "homepage": "https://github.com/tamuratak/vscode-able",
  "main": "./out/src/main.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/tamuratak/vscode-able.git"
  },
  "engines": {
    "vscode": "^1.95.0"
  },
  "files": [
    "pyodide/pyodide/*.json",
    "pyodide/pyodide/*.ts",
    "pyodide/pyodide/*.js",
    "pyodide/pyodide/*.mjs",
    "pyodide/pyodide/*.wasm",
    "pyodide/pyodide/micropip*",
    "node_modules",
    "out",
    "LICENSE"
  ],
  "capabilities": {
    "virtualWorkspaces": true,
    "untrustedWorkspaces": {
      "supported": true
    }
  },
  "contributes": {
    "authentication": [
      {
        "id": "openai_api",
        "label": "OpenAI API (with Able)"
      }
    ],
    "chatParticipants": [
      {
        "id": "able.chatParticipant",
        "fullName": "Able Chat",
        "name": "able",
        "description": "Able to write well",
        "isSticky": true,
        "commands": [
          {
            "name": "edit",
            "description": "Edit text based on instructions"
          },
          {
            "name": "plan",
            "description": "Plan a project"
          },
          {
            "name": "fluent",
            "description": "Make fluent"
          },
          {
            "name": "fluent_ja",
            "description": "Make fluent in Japanese"
          },
          {
            "name": "to_en",
            "description": "Translate to English"
          },
          {
            "name": "to_ja",
            "description": "Translate to Japanese"
          }
        ]
      }
    ],
    "languageModelTools": [
      {
        "name": "able_python",
        "tags": [
          "Python Execution"
        ],
        "displayName": "Run Python",
        "modelDescription": "This tool runs Python code using Pyodide, a WebAssembly-based runtime, and returns the result of the final evaluated expression. It allows an LLM to dynamically evaluate code for debugging, testing, or real-time data processing in a safe, sandboxed environment. This is useful for validating code behavior or computing results during decision-making.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The Python code to run"
            },
            "reason": {
              "type": "string",
              "description": "The reason for running the code"
            }
          },
          "required": [
            "code"
          ]
        }
      },
      {
        "name": "able_replace_text",
        "tags": [
          "Text Editing"
        ],
        "displayName": "Edit File",
        "modelDescription": "This tool edits a file based on instructions, allowing an LLM to modify or enhance content. It should include the three lines before and after the changes.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The absolute path of the file to edit, starting with /."
            },
            "textToReplace": {
              "type": "string",
              "description": "The text to replace in the original text. This should include include the three lines before and after the changes. Without your comment in the code."
            },
            "input": {
              "type": "string",
              "description": "The new input text to insert into the range of the textToReplace. This should include include the three lines before and after the changes. Without your comment in the code."
            }
          },
          "required": [
            "path",
            "textToReplace",
            "input"
          ]
        }
      },
      {
        "name": "able_read_file",
        "tags": [
          "File Reading"
        ],
        "displayName": "Read File",
        "modelDescription": "This tool reads a file and returns its content, allowing an LLM to access and analyze file data.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The file to read. This should be absolute path, starting with /."
            }
          },
          "required": [
            "path"
          ]
        }
      },
      {
        "name": "able_repository_tree",
        "tags": [
          "File System"
        ],
        "displayName": "Repository Tree",
        "modelDescription": "This tool generates an ASCII representation of the file structure for the current repository.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "useAbsolutePath": {
              "type": "boolean",
              "description": "The option to use an absolute path for printing file names. Default is false."
            }
          }
        }

      },
      {
        "name": "able_list_dir",
        "tags": [
          "File System"
        ],
        "displayName": "List Directory",
        "modelDescription": "This tool lists the contents of a directory in the file system, allowing users to see the files and subdirectories present.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The path of the directory to list. This should be absolute path, starting with /."
            },
            "useAbsolutePath": {
              "type": "boolean",
              "description": "The option to use an absolute path for printing file names. Default is false."
            }
          },
          "required": [
            "path"
          ]
        }
      }
    ],
    "commands": [
      {
        "command": "able.activateCopilotChatModels",
        "title": "Able: Activate Copilot Chat Models"
      },
      {
        "command": "able.doSomething",
        "title": "Able: Do Something"
      },
      {
        "command": "able.quickPickModel",
        "title": "Able: Select Chat Model"
      },
      {
        "command": "able.closeTerminalAndOpenSideBar",
        "title": "Able: Close Terminal and Open Side Bar"
      },
      {
        "command": "able.disableInlineSuggest",
        "title": "Able: Copilot, let's savor a little silence for a while."
      },
      {
        "command": "able.focusActiveDocument",
        "title": "Able: Focus Active Document"
      },
      {
        "command": "able.focusTerminal",
        "title": "Able: Focus Terminal"
      },
      {
        "command": "able.killLinesToEnd",
        "title": "Able: Kill Lines To End"
      },
      {
        "command": "able.loginOpenAI",
        "title": "Able: Login to OpenAI"
      },
      {
        "command": "able.openTerminalAndCloseSideBar",
        "title": "Able: Open Terminal and Close Side Bar"
      },
      {
        "command": "able.recenter",
        "title": "Able: Recenter"
      },
      {
        "command": "able.terminalNew",
        "title": "Able: Create New Terminal"
      }
    ],
    "keybindings": [
      {
        "command": "able.closeTerminalAndOpenSideBar",
        "key": "Shift+Ctrl+t",
        "when": "!sideBarVisible"
      },
      {
        "command": "able.disableInlineSuggest",
        "key": "shift+escape",
        "when": "inlineSuggestionVisible"
      },
      {
        "command": "able.openTerminalAndCloseSideBar",
        "key": "Shift+Ctrl+t",
        "when": "sideBarVisible"
      },
      {
        "key": "ctrl+t",
        "command": "able.terminalNew",
        "when": "terminalProcessSupported && !terminalIsOpen"
      },
      {
        "key": "ctrl+t",
        "command": "able.focusTerminal",
        "when": "!terminalFocus && !terminalEditorFocus && terminalIsOpen"
      },
      {
        "key": "ctrl+t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminalFocus && !terminalEditorFocus"
      },
      {
        "key": "ctrl+t",
        "command": "able.focusActiveDocument",
        "when": "terminalEditorFocus"
      },
      {
        "key": "ctrl+l ctrl+l",
        "command": "able.recenter"
      },
      {
        "key": "ctrl+k",
        "command": "able.killLinesToEnd",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+k",
        "command": "-deleteAllRight",
        "when": "editorTextFocus && !editorReadonly"
      }
    ],
		"taskDefinitions": [
			{
				"type": "abletask"
			}
		],
    "configuration": [
      {
        "title": "Able",
        "properties": {
          "able.taskWatcher": {
            "type": "array",
            "description": "The list of tasks to watch.",
            "default": [],
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the task to watch."
                },
                "globPattern": {
                  "type": "string",
                  "description": "The glob pattern to match files."
                }
              },
              "required": [
                "name",
                "globPattern"
              ]
            }
          }
        }

      }
    ]
  },
  "activationEvents": [
    "onFileSystem:file"
  ],
  "imports": {
    "#pyodide": {
      "default": "./pyodide/pyodide/pyodide.js"
    }
  },
  "dependencies": {
    "@microsoft/tiktokenizer": "1.0.10",
    "@vscode/prompt-tsx": "0.4.0-alpha.4",
    "openai": "5.0.1",
    "workerpool": "9.2.0"
  },
  "devDependencies": {
    "@eslint/js": "9.28.0",
    "@types/mocha": "10.0.10",
    "@types/node": "~20.14",
    "@types/vscode": "1.95.0",
    "@vscode/test-electron": "2.5.2",
    "@vscode/vsce": "3.4.2",
    "eslint": "9.28.0",
    "glob": "11.0.1",
    "mocha": "11.1.0",
    "rimraf": "3.0.2",
    "source-map-support": "0.5.21",
    "typescript": "5.7.2",
    "typescript-eslint": "8.33.0"
  },
  "scripts": {
    "build": "npm run compile",
    "compile": "tsc -p ./",
    "clean": "rimraf out/ .eslintcache",
    "download_pyodide": "node ./dev/download_pyodide.mjs",
    "lint": "eslint --cache .",
    "lint:fix": "eslint --fix --cache .",
    "release": "npm run clean && npm run lint && npm run compile && vsce package",
    "test": "npm run test:xunit && npm run test:spec",
    "test:xunit": "mocha --require source-map-support/register --reporter xunit --ui tdd out/test/unittest/**/*.js",
    "test:spec": "mocha --require source-map-support/register --ui tdd out/test/unittest/**/*.js",
    "test:json": "mocha --require source-map-support/register --reporter json --ui tdd out/test/unittest/**/*.js",
    "test:vscode": "node ./out/test/runvscodetest.js",
    "watch": "tsc -w -p ./"
  }
}
