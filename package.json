{
  "name": "able",
  "displayName": "Able",
  "version": "2.0.0",
  "publisher": "tamuratak",
  "license": "MIT",
  "description": "An extension able to do things",
  "homepage": "https://github.com/tamuratak/vscode-able",
  "main": "./out/src/main.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/tamuratak/vscode-able.git"
  },
  "engines": {
    "vscode": "^1.95.0"
  },
  "files": [
    "pyodide/pyodide",
    "node_modules",
    "out",
    "LICENSE"
  ],
  "capabilities": {
    "virtualWorkspaces": true,
    "untrustedWorkspaces": {
      "supported": true
    }
  },
  "contributes": {
    "authentication": [
      {
        "id": "openai_api",
        "label": "OpenAI API (with Able)"
      }
    ],
    "chatParticipants": [
      {
        "id": "able.chatParticipant",
        "fullName": "Able Chat",
        "name": "able",
        "description": "Able to write well",
        "isSticky": true,
        "commands": [
          {
            "name": "edit",
            "description": "Edit text based on instructions"
          },
          {
            "name": "fluent",
            "description": "Make fluent"
          },
          {
            "name": "fluent_ja",
            "description": "Make fluent in Japanese"
          },
          {
            "name": "to_en",
            "description": "Translate to English"
          },
          {
            "name": "to_ja",
            "description": "Translate to Japanese"
          }
        ]
      }
    ],
    "languageModelTools": [
      {
        "name": "able_python",
        "tags": [
          "Python Execution"
        ],
        "displayName": "Run Python",
        "modelDescription": "This tool runs Python code using Pyodide, a WebAssembly-based runtime, and returns the result of the final evaluated expression. It allows an LLM to dynamically evaluate code for debugging, testing, or real-time data processing in a safe, sandboxed environment. This is useful for validating code behavior or computing results during decision-making.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The Python code to run"
            },
            "reason": {
              "type": "string",
              "description": "The reason for running the code"
            }
          },
          "required": [
            "code"
          ]
        }
      },
      {
        "name": "able_replace_text",
        "tags": [
          "Text Editing"
        ],
        "displayName": "Edit File",
        "modelDescription": "This tool edits a file based on instructions, allowing an LLM to modify or enhance content. It should include the three lines before and after the changes.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "file": {
              "type": "string",
              "description": "The file to edit"
            },
            "textToReplace": {
              "type": "string",
              "description": "The text to replace in the original text. This should include include the three lines before and after the changes. Without your comment in the code."
            },
            "input": {
              "type": "string",
              "description": "The new input text to insert into the range of the textToReplace. This should include include the three lines before and after the changes. Without your comment in the code."
            }
          },
          "required": [
            "textToReplace",
            "input"
          ]
        }
      },
      {
        "name": "able_count_characters",
        "tags": [
          "Text Analysis"
        ],
        "displayName": "Count Characters",
        "modelDescription": "This tool counts the number of characters in a given input, enabling an LLM to determine the precise range of modifications when editing text.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "input": {
              "type": "string",
              "description": "The text to analyze"
            }
          },
          "required": [
            "input"
          ]
        }
      }
    ],
    "commands": [
      {
        "command": "able.activateCopilotChatModels",
        "title": "Able: Activate Copilot Chat Models"
      },
      {
        "command": "able.quickPickModel",
        "title": "Able: Select Chat Model"
      },
      {
        "command": "able.closeTerminalAndOpenSideBar",
        "title": "Able: Close Terminal and Open Side Bar"
      },
      {
        "command": "able.disableInlineSuggest",
        "title": "Able: Copilot, let's savor a little silence for a while."
      },
      {
        "command": "able.focusActiveDocument",
        "title": "Able: Focus Active Document"
      },
      {
        "command": "able.focusTerminal",
        "title": "Able: Focus Terminal"
      },
      {
        "command": "able.killLinesToEnd",
        "title": "Able: Kill Lines To End"
      },
      {
        "command": "able.loginOpenAI",
        "title": "Able: Login to OpenAI"
      },
      {
        "command": "able.openTerminalAndCloseSideBar",
        "title": "Able: Open Terminal and Close Side Bar"
      },
      {
        "command": "able.recenter",
        "title": "Able: Recenter"
      },
      {
        "command": "able.terminalNew",
        "title": "Able: Create New Terminal"
      }
    ],
    "keybindings": [
      {
        "command": "able.closeTerminalAndOpenSideBar",
        "key": "Shift+Ctrl+t",
        "when": "!sideBarVisible"
      },
      {
        "command": "able.disableInlineSuggest",
        "key": "shift+escape",
        "when": "inlineSuggestionVisible"
      },
      {
        "command": "able.openTerminalAndCloseSideBar",
        "key": "Shift+Ctrl+t",
        "when": "sideBarVisible"
      },
      {
        "key": "ctrl+t",
        "command": "able.terminalNew",
        "when": "terminalProcessSupported && !terminalIsOpen"
      },
      {
        "key": "ctrl+t",
        "command": "able.focusTerminal",
        "when": "!terminalFocus && !terminalEditorFocus && terminalIsOpen"
      },
      {
        "key": "ctrl+t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminalFocus && !terminalEditorFocus"
      },
      {
        "key": "ctrl+t",
        "command": "able.focusActiveDocument",
        "when": "terminalEditorFocus"
      },
      {
        "key": "ctrl+l ctrl+l",
        "command": "able.recenter"
      },
      {
        "key": "ctrl+k",
        "command": "able.killLinesToEnd",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+k",
        "command": "-deleteAllRight",
        "when": "editorTextFocus && !editorReadonly"
      }
    ]
  },
  "activationEvents": [
    "onFileSystem:file"
  ],
  "imports": {
    "#pyodide": {
      "default": "./pyodide/pyodide/pyodide.js"
    }
  },
  "dependencies": {
    "@microsoft/tiktokenizer": "^1.0.9",
    "@vscode/prompt-tsx": "^0.3.0-alpha.13",
    "openai": "^4.76.0",
    "workerpool": "^9.2.0"
  },
  "devDependencies": {
    "@eslint/js": "9.15.0",
    "@types/eslint__js": "8.42.3",
    "@types/mocha": "^10.0.10",
    "@types/node": "~20.14",
    "@types/vscode": "1.95.0",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "3.2.1",
    "eslint": "9.15.0",
    "glob": "^11.0.1",
    "mocha": "^11.1.0",
    "rimraf": "3.0.2",
    "source-map-support": "^0.5.21",
    "typescript": "5.7.2",
    "typescript-eslint": "8.16.0"
  },
  "scripts": {
    "build": "npm run compile",
    "compile": "tsc -p ./",
    "clean": "rimraf out/ .eslintcache",
    "download_pyodide": "node ./dev/download_pyodide.mjs",
    "lint": "eslint --cache .",
    "lint:fix": "eslint --fix --cache .",
    "release": "npm run clean && npm run lint && npm run compile && vsce package",
    "test": "mocha --require source-map-support/register --ui tdd out/test/unittest/**/*.js",
    "test:vscode": "node ./out/test/runvscodetest.js",
    "watch": "tsc -w -p ./"
  }
}
