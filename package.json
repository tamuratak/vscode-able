{
  "name": "able",
  "displayName": "Able",
  "version": "4.12.0",
  "publisher": "tamuratak",
  "license": "MIT",
  "description": "An extension able to do things",
  "homepage": "https://github.com/tamuratak/vscode-able",
  "main": "./out/src/main.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/tamuratak/vscode-able.git"
  },
  "engines": {
    "vscode": "^1.102.0"
  },
  "files": [
    "pyodide/pyodide/*.json",
    "pyodide/pyodide/*.ts",
    "pyodide/pyodide/*.js",
    "pyodide/pyodide/*.mjs",
    "pyodide/pyodide/*.wasm",
    "pyodide/pyodide/micropip*",
    "node_modules",
    "out",
    "LICENSE"
  ],
  "capabilities": {
    "virtualWorkspaces": true,
    "untrustedWorkspaces": {
      "supported": true
    }
  },
  "enabledApiProposals": [
    "chatParticipantAdditions",
    "chatProvider",
    "languageModelDataPart",
    "languageModelSystem"
  ],
  "contributes": {
    "authentication": [
      {
        "id": "gemini_api",
        "label": "Gemini (with Able)"
      },
      {
        "id": "openai_api",
        "label": "OpenAI (with Able)"
      },
      {
        "id": "groq_api",
        "label": "Groq (with Able)"
      }
    ],
    "chatParticipants": [
      {
        "id": "able.chatParticipant",
        "fullName": "Able Chat",
        "name": "able",
        "description": "Able to write well",
        "isSticky": true,
        "commands": [
          {
            "name": "fluent",
            "description": "Make fluent"
          },
          {
            "name": "fluent_ja",
            "description": "Make fluent in Japanese"
          },
          {
            "name": "to_en",
            "description": "Translate to English"
          },
          {
            "name": "to_ja",
            "description": "Translate to Japanese"
          }
        ]
      }
    ],
    "languageModels": [
      {
        "vendor": "gemini_with_able",
        "displayName": "Gemini with Able"
      },
      {
        "vendor": "openai_with_able",
        "displayName": "OpenAI with Able"
      },
      {
        "vendor": "groq_with_able",
        "displayName": "Groq with Able"
      }
    ],
    "languageModelTools": [
      {
        "name": "able_python",
        "tags": [
          "Python Execution"
        ],
        "displayName": "Run Python",
        "modelDescription": "This tool runs Python code using Pyodide, a WebAssembly-based runtime, and returns the result of the final evaluated expression. It allows an LLM to dynamically evaluate code for debugging, testing, or real-time data processing in a safe, sandboxed environment. This is useful for validating code behavior or computing results during decision-making.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The Python code to run"
            },
            "reason": {
              "type": "string",
              "description": "The reason for running the code"
            }
          },
          "required": [
            "code"
          ]
        }
      },
      {
        "name": "able_web_search",
        "toolReferenceName": "websearch",
        "tags": [
          "Web Search"
        ],
        "displayName": "Web Search",
        "canBeReferencedInPrompt": true,
        "userDescription": "Search the web for information.",
        "modelDescription": "This tool performs a web search using the provided query and returns the results.",
        "icon": "$(globe)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The query to search the web for"
            }            
          },
          "required": ["query"]
        }
      },
      {
        "name": "able_run_in_sandbox",
        "toolReferenceName": "runInSandbox",
        "tags": [
          "command"
        ],
        "displayName": "Run in Sandbox",
        "canBeReferencedInPrompt": true,
        "userDescription": "Run commands",
        "modelDescription": "This tool allows you to execute shell commands.\n\nCommand Execution:\n- Supports multi-line commands\n\nDirectory Management:\n- Must use absolute paths to avoid navigation issues.\n\nProgram Execution:\n- Supports Node.js, and other executables.\n- Install dependencies via npm, cargo etc.\n\nOutput Management:\n- Use filters like 'head', 'tail', 'grep' to limit output size\n- For pager commands, disable paging: use 'git --no-pager' or add '| cat'\n\nBest Practices:\n- Be specific with commands to avoid excessive output\n- Use targeted queries instead of broad scans\n- Consider using 'wc -l' to count before listing many items",
        "icon": "$(terminal)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The command to run."
            },
            "explanation": {
              "type": "string",
              "description": "A one-sentence description of what the command does. This will be shown to the user before the command is run."
            }
          },
          "required": [
            "command",
            "explanation"
          ]
        }
      },
      {
        "name": "able_annotation",
        "toolReferenceName": "annotation",
        "tags": [
          "Annotation"
        ],
        "displayName": "Inspect Code",
        "canBeReferencedInPrompt": true,
        "userDescription": "Inspect code for type information",
        "modelDescription": "Inspects the specified code fragment to determine type information and returns an annotated copy as a string. Each variable's inferred type is included as a comment to help the LLM resolve errors. The response is accompanied by type definitions.",
        "icon": "$(references)",
				"inputSchema": {
					"type": "object",
					"properties": {
						"filePath": {
							"type": "string",
							"description": "The absolute path to the file to inspect."
						},
						"code": {
							"type": "string",
							"description": "The code in the file to inspect."
						}
					},
					"required": [
						"filePath",
						"code"
					]
				}
      }
    ],
    "commands": [
      {
        "command": "able.doSomething",
        "title": "Able: Do Something"
      },
      {
        "command": "able.closeTerminalAndOpenSideBar",
        "title": "Able: Close Terminal and Open Side Bar"
      },
      {
        "command": "able.focusActiveDocument",
        "title": "Able: Focus Active Document"
      },
      {
        "command": "able.focusTerminal",
        "title": "Able: Focus Terminal"
      },
      {
        "command": "able.killLinesToEnd",
        "title": "Able: Kill Lines To End"
      },
      {
        "command": "able.loginGemini",
        "title": "Able: Login to Gemini"
      },
      {
        "command": "able.loginOpenAI",
        "title": "Able: Login to OpenAI"
      },
      {
        "command": "able.loginGroq",
        "title": "Able: Login to Groq"
      },
      {
        "command": "able.openTerminalAndCloseSideBar",
        "title": "Able: Open Terminal and Close Side Bar"
      },
      {
        "command": "able.recenter",
        "title": "Able: Recenter"
      },
      {
        "command": "able.terminalNew",
        "title": "Able: Create New Terminal"
      }
    ],
    "keybindings": [
      {
        "command": "able.closeTerminalAndOpenSideBar",
        "key": "Shift+Ctrl+t",
        "when": "!sideBarVisible"
      },
      {
        "command": "able.openTerminalAndCloseSideBar",
        "key": "Shift+Ctrl+t",
        "when": "sideBarVisible"
      },
      {
        "key": "ctrl+t",
        "command": "able.terminalNew",
        "when": "terminalProcessSupported && !terminalIsOpen"
      },
      {
        "key": "ctrl+t",
        "command": "able.focusTerminal",
        "when": "!terminalFocus && !terminalEditorFocus && terminalIsOpen"
      },
      {
        "key": "ctrl+t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminalFocus && !terminalEditorFocus"
      },
      {
        "key": "ctrl+t",
        "command": "able.focusActiveDocument",
        "when": "terminalEditorFocus"
      },
      {
        "key": "ctrl+l ctrl+l",
        "command": "able.recenter"
      },
      {
        "key": "ctrl+k",
        "command": "able.killLinesToEnd",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+k",
        "command": "-deleteAllRight",
        "when": "editorTextFocus && !editorReadonly"
      }
    ],
    "taskDefinitions": [
      {
        "type": "abletask"
      }
    ],
    "configuration": [
      {
        "title": "Able",
        "properties": {
          "able.taskWatcher": {
            "type": "array",
            "description": "The list of tasks to watch.",
            "default": [],
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the task to watch."
                },
                "globPattern": {
                  "type": "string",
                  "description": "The glob pattern of relative path to match files."
                }
              },
              "required": [
                "name",
                "globPattern"
              ]
            }
          }
        ,
          "able.runInSandbox.denyFileReadDirectories": {
            "type": "array",
            "description": "Array of absolute paths that will be denied for file-read in sandbox-exec. Each entry must be an absolute path.",
            "default": [],
            "items": {
              "type": "string"
            }
          }
        }
      }
    ]
  },
  "activationEvents": [
    "onFileSystem:file"
  ],
  "imports": {
    "#pyodide": {
      "default": "./pyodide/pyodide/pyodide.js"
    }
  },
  "dependencies": {
    "@google/genai": "1.12.0",
    "@microsoft/tiktokenizer": "1.0.10",
    "@vscode/prompt-tsx": "0.4.0-alpha.4",
    "ajv": "8.17.1",
    "openai": "5.12.2",
    "workerpool": "9.3.3"
  },
  "devDependencies": {
    "@eslint/js": "9.31.0",
    "@types/mocha": "10.0.10",
    "@types/node": "~22.15",
    "@types/vscode": "1.102.0",
    "@vscode/dts": "^0.4.1",
    "@vscode/test-electron": "2.5.2",
    "@vscode/vsce": "3.6.0",
    "eslint": "9.31.0",
    "glob": "11.0.1",
    "mocha": "11.1.0",
    "rimraf": "3.0.2",
    "source-map-support": "0.5.21",
    "typescript": "5.8.3",
    "typescript-eslint": "8.37.0"
  },
  "scripts": {
    "build": "npm run compile",
    "compile": "tsc -p ./",
    "clean": "rimraf out/ .eslintcache",
    "download_pyodide": "node ./dev/download_pyodide.mjs",
    "lint": "eslint --cache .",
    "lint:fix": "eslint --fix --cache .",
    "release": "npm run clean && npm run lint && npm run compile && vsce package",
    "test": "npm run test:xunit && npm run test:spec",
    "test:xunit": "sandbox-exec.js -c -- mocha --require source-map-support/register --reporter xunit --ui tdd out/test/unittest/**/*.js",
    "test:spec": "sandbox-exec.js -c -- mocha --require source-map-support/register --ui tdd out/test/unittest/**/*.js",
    "test:json": "sandbox-exec.js -c -- mocha --require source-map-support/register --reporter json --ui tdd out/test/unittest/**/*.js",
    "test:vscode": "node ./out/test/runvscodetest.js",
    "watch": "tsc -w -p ./"
  }
}
